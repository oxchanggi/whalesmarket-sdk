/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type ConfigStruct = {
  pledgeRate: BigNumberish;
  feeRefund: BigNumberish;
  feeSettle: BigNumberish;
  feeWallet: string;
};

export type ConfigStructOutput = [BigNumber, BigNumber, BigNumber, string] & {
  pledgeRate: BigNumber;
  feeRefund: BigNumber;
  feeSettle: BigNumber;
  feeWallet: string;
};

export type OfferStruct = {
  offerType: BigNumberish;
  tokenId: BytesLike;
  exToken: string;
  amount: BigNumberish;
  value: BigNumberish;
  collateral: BigNumberish;
  filledAmount: BigNumberish;
  status: BigNumberish;
  offeredBy: string;
  fullMatch: boolean;
};

export type OfferStructOutput = [
  number,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  number,
  string,
  boolean
] & {
  offerType: number;
  tokenId: string;
  exToken: string;
  amount: BigNumber;
  value: BigNumber;
  collateral: BigNumber;
  filledAmount: BigNumber;
  status: number;
  offeredBy: string;
  fullMatch: boolean;
};

export type OrderStruct = {
  offerId: BigNumberish;
  amount: BigNumberish;
  seller: string;
  buyer: string;
  status: BigNumberish;
};

export type OrderStructOutput = [
  BigNumber,
  BigNumber,
  string,
  string,
  number
] & {
  offerId: BigNumber;
  amount: BigNumber;
  seller: string;
  buyer: string;
  status: number;
};

export type SettleDiscountStruct = {
  orderId: BigNumberish;
  sellerDiscount: BigNumberish;
  buyerDiscount: BigNumberish;
  signature: BytesLike;
};

export type SettleDiscountStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  string
] & {
  orderId: BigNumber;
  sellerDiscount: BigNumber;
  buyerDiscount: BigNumber;
  signature: string;
};

export type TokenStruct = {
  token: string;
  settleTime: BigNumberish;
  settleDuration: BigNumberish;
  settleRate: BigNumberish;
  status: BigNumberish;
};

export type TokenStructOutput = [string, number, number, BigNumber, number] & {
  token: string;
  settleTime: number;
  settleDuration: number;
  settleRate: BigNumber;
  status: number;
};

export interface PreMarketInterface extends utils.Interface {
  functions: {
    "ADMIN_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "DISCOUNT_FEE_ROLE()": FunctionFragment;
    "OPERATOR_ROLE()": FunctionFragment;
    "cancelOffer(uint256)": FunctionFragment;
    "cancelOffers(uint256[])": FunctionFragment;
    "cancelToken(bytes32)": FunctionFragment;
    "config()": FunctionFragment;
    "createToken(bytes32,uint48)": FunctionFragment;
    "fillOffer(uint256,uint256)": FunctionFragment;
    "fillOfferETH(uint256,uint256)": FunctionFragment;
    "forceCancelOrder(uint256)": FunctionFragment;
    "forceCancelOrders(uint256[])": FunctionFragment;
    "frizeToken(bytes32)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize()": FunctionFragment;
    "isAcceptedToken(address)": FunctionFragment;
    "isBuyOffer(uint256)": FunctionFragment;
    "isLocked(bytes32)": FunctionFragment;
    "isSellOffer(uint256)": FunctionFragment;
    "lastOfferId()": FunctionFragment;
    "lastOrderId()": FunctionFragment;
    "newOffer(uint8,bytes32,uint256,uint256,address,bool)": FunctionFragment;
    "newOfferETH(uint8,bytes32,uint256,uint256,bool)": FunctionFragment;
    "offerAmount(uint256)": FunctionFragment;
    "offerAmountAvailable(uint256)": FunctionFragment;
    "offerExToken(uint256)": FunctionFragment;
    "offerStatus(uint256)": FunctionFragment;
    "offerValue(uint256)": FunctionFragment;
    "offers(uint256)": FunctionFragment;
    "orderStatus(uint256)": FunctionFragment;
    "orders(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setAcceptedTokens(address[],bool)": FunctionFragment;
    "setLockToken(bytes32,bool)": FunctionFragment;
    "settle2Steps(uint256,bytes32)": FunctionFragment;
    "settle2StepsBatch(uint256[],bytes32[])": FunctionFragment;
    "settleCancelled(uint256)": FunctionFragment;
    "settleCancelledWithDiscount(uint256,(uint256,uint256,uint256,bytes))": FunctionFragment;
    "settleCancelleds(uint256[])": FunctionFragment;
    "settleFilled(uint256)": FunctionFragment;
    "settleFilledWithDiscount(uint256,(uint256,uint256,uint256,bytes))": FunctionFragment;
    "settleFilleds(uint256[])": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "tokenForceCancelSettlePhase(bytes32)": FunctionFragment;
    "tokenToSettlePhase(bytes32,address,uint152)": FunctionFragment;
    "tokenToggleActivation(bytes32)": FunctionFragment;
    "tokens(bytes32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateConfig(address,uint256,uint256,uint256)": FunctionFragment;
    "updateSettleDuration(bytes32,uint48)": FunctionFragment;
    "withdrawLiquidETH(uint256)": FunctionFragment;
    "withdrawLiquidToken(address,uint256)": FunctionFragment;
    "withdrawStuckToken(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "DISCOUNT_FEE_ROLE"
      | "OPERATOR_ROLE"
      | "cancelOffer"
      | "cancelOffers"
      | "cancelToken"
      | "config"
      | "createToken"
      | "fillOffer"
      | "fillOfferETH"
      | "forceCancelOrder"
      | "forceCancelOrders"
      | "frizeToken"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isAcceptedToken"
      | "isBuyOffer"
      | "isLocked"
      | "isSellOffer"
      | "lastOfferId"
      | "lastOrderId"
      | "newOffer"
      | "newOfferETH"
      | "offerAmount"
      | "offerAmountAvailable"
      | "offerExToken"
      | "offerStatus"
      | "offerValue"
      | "offers"
      | "orderStatus"
      | "orders"
      | "owner"
      | "renounceOwnership"
      | "renounceRole"
      | "revokeRole"
      | "setAcceptedTokens"
      | "setLockToken"
      | "settle2Steps"
      | "settle2StepsBatch"
      | "settleCancelled"
      | "settleCancelledWithDiscount"
      | "settleCancelleds"
      | "settleFilled"
      | "settleFilledWithDiscount"
      | "settleFilleds"
      | "supportsInterface"
      | "tokenForceCancelSettlePhase"
      | "tokenToSettlePhase"
      | "tokenToggleActivation"
      | "tokens"
      | "transferOwnership"
      | "updateConfig"
      | "updateSettleDuration"
      | "withdrawLiquidETH"
      | "withdrawLiquidToken"
      | "withdrawStuckToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DISCOUNT_FEE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOffers",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelToken",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "config", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createToken",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOffer",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOfferETH",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forceCancelOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forceCancelOrders",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "frizeToken",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAcceptedToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isBuyOffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isLocked", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "isSellOffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastOfferId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastOrderId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newOffer",
    values: [
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      string,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "newOfferETH",
    values: [BigNumberish, BytesLike, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "offerAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "offerAmountAvailable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "offerExToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "offerStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "offerValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "offers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "orderStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "orders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAcceptedTokens",
    values: [string[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setLockToken",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "settle2Steps",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "settle2StepsBatch",
    values: [BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "settleCancelled",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settleCancelledWithDiscount",
    values: [BigNumberish, SettleDiscountStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "settleCancelleds",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "settleFilled",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settleFilledWithDiscount",
    values: [BigNumberish, SettleDiscountStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "settleFilleds",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenForceCancelSettlePhase",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToSettlePhase",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToggleActivation",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "tokens", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateConfig",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSettleDuration",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLiquidETH",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLiquidToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawStuckToken",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DISCOUNT_FEE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "config", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fillOffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fillOfferETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceCancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceCancelOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "frizeToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAcceptedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isBuyOffer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isLocked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isSellOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastOfferId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastOrderId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newOffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newOfferETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offerAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offerAmountAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offerExToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offerStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "offerValue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "offers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "orderStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAcceptedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLockToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settle2Steps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settle2StepsBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleCancelled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleCancelledWithDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleCancelleds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleFilled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleFilledWithDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleFilleds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenForceCancelSettlePhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToSettlePhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToggleActivation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSettleDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStuckToken",
    data: BytesLike
  ): Result;

  events: {
    "CancelOffer(uint256,uint256,uint256,address)": EventFragment;
    "CancelOrder(uint256,address)": EventFragment;
    "CloseOffer(uint256,uint256)": EventFragment;
    "Initialized(uint64)": EventFragment;
    "NewOffer(uint256,uint8,bytes32,address,uint256,uint256,uint256,bool,address)": EventFragment;
    "NewOrder(uint256,uint256,uint256,address,address)": EventFragment;
    "NewToken(bytes32,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Settle2Steps(uint256,bytes32,address)": EventFragment;
    "SettleCancelled(uint256,uint256,uint256,address)": EventFragment;
    "SettleFilled(uint256,uint256,uint256,address)": EventFragment;
    "TokenCancelled(bytes32)": EventFragment;
    "TokenForceCancelSettlePhase(bytes32)": EventFragment;
    "TokenFrized(bytes32,uint8)": EventFragment;
    "TokenLockChanged(bytes32,uint8)": EventFragment;
    "TokenToSettlePhase(bytes32,address,uint256,uint256)": EventFragment;
    "UpdateAcceptedTokens(address[],bool)": EventFragment;
    "UpdateConfig(address,uint256,uint256,uint256,address,uint256,uint256,uint256)": EventFragment;
    "UpdateTokenSettleDuration(bytes32,uint48,uint48)": EventFragment;
    "UpdateTokenStatus(bytes32,uint8,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CancelOffer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CloseOffer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewOffer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Settle2Steps"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SettleCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SettleFilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenCancelled"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TokenForceCancelSettlePhase"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenFrized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenLockChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenToSettlePhase"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateAcceptedTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateConfig"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateTokenSettleDuration"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateTokenStatus"): EventFragment;
}

export interface CancelOfferEventObject {
  offerId: BigNumber;
  refundValue: BigNumber;
  refundFee: BigNumber;
  doer: string;
}
export type CancelOfferEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string],
  CancelOfferEventObject
>;

export type CancelOfferEventFilter = TypedEventFilter<CancelOfferEvent>;

export interface CancelOrderEventObject {
  orderId: BigNumber;
  doer: string;
}
export type CancelOrderEvent = TypedEvent<
  [BigNumber, string],
  CancelOrderEventObject
>;

export type CancelOrderEventFilter = TypedEventFilter<CancelOrderEvent>;

export interface CloseOfferEventObject {
  offerId: BigNumber;
  refundAmount: BigNumber;
}
export type CloseOfferEvent = TypedEvent<
  [BigNumber, BigNumber],
  CloseOfferEventObject
>;

export type CloseOfferEventFilter = TypedEventFilter<CloseOfferEvent>;

export interface InitializedEventObject {
  version: BigNumber;
}
export type InitializedEvent = TypedEvent<[BigNumber], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface NewOfferEventObject {
  id: BigNumber;
  offerType: number;
  tokenId: string;
  exToken: string;
  amount: BigNumber;
  value: BigNumber;
  collateral: BigNumber;
  fullMatch: boolean;
  doer: string;
}
export type NewOfferEvent = TypedEvent<
  [
    BigNumber,
    number,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    string
  ],
  NewOfferEventObject
>;

export type NewOfferEventFilter = TypedEventFilter<NewOfferEvent>;

export interface NewOrderEventObject {
  id: BigNumber;
  offerId: BigNumber;
  amount: BigNumber;
  seller: string;
  buyer: string;
}
export type NewOrderEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, string],
  NewOrderEventObject
>;

export type NewOrderEventFilter = TypedEventFilter<NewOrderEvent>;

export interface NewTokenEventObject {
  tokenId: string;
  settleDuration: BigNumber;
}
export type NewTokenEvent = TypedEvent<
  [string, BigNumber],
  NewTokenEventObject
>;

export type NewTokenEventFilter = TypedEventFilter<NewTokenEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface Settle2StepsEventObject {
  orderId: BigNumber;
  hash: string;
  doer: string;
}
export type Settle2StepsEvent = TypedEvent<
  [BigNumber, string, string],
  Settle2StepsEventObject
>;

export type Settle2StepsEventFilter = TypedEventFilter<Settle2StepsEvent>;

export interface SettleCancelledEventObject {
  orderId: BigNumber;
  value: BigNumber;
  fee: BigNumber;
  doer: string;
}
export type SettleCancelledEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string],
  SettleCancelledEventObject
>;

export type SettleCancelledEventFilter = TypedEventFilter<SettleCancelledEvent>;

export interface SettleFilledEventObject {
  orderId: BigNumber;
  value: BigNumber;
  fee: BigNumber;
  doer: string;
}
export type SettleFilledEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string],
  SettleFilledEventObject
>;

export type SettleFilledEventFilter = TypedEventFilter<SettleFilledEvent>;

export interface TokenCancelledEventObject {
  tokenId: string;
}
export type TokenCancelledEvent = TypedEvent<
  [string],
  TokenCancelledEventObject
>;

export type TokenCancelledEventFilter = TypedEventFilter<TokenCancelledEvent>;

export interface TokenForceCancelSettlePhaseEventObject {
  tokenId: string;
}
export type TokenForceCancelSettlePhaseEvent = TypedEvent<
  [string],
  TokenForceCancelSettlePhaseEventObject
>;

export type TokenForceCancelSettlePhaseEventFilter =
  TypedEventFilter<TokenForceCancelSettlePhaseEvent>;

export interface TokenFrizedEventObject {
  tokenId: string;
  status: number;
}
export type TokenFrizedEvent = TypedEvent<
  [string, number],
  TokenFrizedEventObject
>;

export type TokenFrizedEventFilter = TypedEventFilter<TokenFrizedEvent>;

export interface TokenLockChangedEventObject {
  tokenId: string;
  status: number;
}
export type TokenLockChangedEvent = TypedEvent<
  [string, number],
  TokenLockChangedEventObject
>;

export type TokenLockChangedEventFilter =
  TypedEventFilter<TokenLockChangedEvent>;

export interface TokenToSettlePhaseEventObject {
  tokenId: string;
  token: string;
  settleRate: BigNumber;
  settleTime: BigNumber;
}
export type TokenToSettlePhaseEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  TokenToSettlePhaseEventObject
>;

export type TokenToSettlePhaseEventFilter =
  TypedEventFilter<TokenToSettlePhaseEvent>;

export interface UpdateAcceptedTokensEventObject {
  tokens: string[];
  isAccepted: boolean;
}
export type UpdateAcceptedTokensEvent = TypedEvent<
  [string[], boolean],
  UpdateAcceptedTokensEventObject
>;

export type UpdateAcceptedTokensEventFilter =
  TypedEventFilter<UpdateAcceptedTokensEvent>;

export interface UpdateConfigEventObject {
  oldFeeWallet: string;
  oldFeeSettle: BigNumber;
  oldFeeRefund: BigNumber;
  oldPledgeRate: BigNumber;
  newFeeWallet: string;
  newFeeSettle: BigNumber;
  newFeeRefund: BigNumber;
  newPledgeRate: BigNumber;
}
export type UpdateConfigEvent = TypedEvent<
  [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  UpdateConfigEventObject
>;

export type UpdateConfigEventFilter = TypedEventFilter<UpdateConfigEvent>;

export interface UpdateTokenSettleDurationEventObject {
  tokenId: string;
  oldValue: number;
  newValue: number;
}
export type UpdateTokenSettleDurationEvent = TypedEvent<
  [string, number, number],
  UpdateTokenSettleDurationEventObject
>;

export type UpdateTokenSettleDurationEventFilter =
  TypedEventFilter<UpdateTokenSettleDurationEvent>;

export interface UpdateTokenStatusEventObject {
  tokenId: string;
  oldValue: number;
  newValue: number;
}
export type UpdateTokenStatusEvent = TypedEvent<
  [string, number, number],
  UpdateTokenStatusEventObject
>;

export type UpdateTokenStatusEventFilter =
  TypedEventFilter<UpdateTokenStatusEvent>;

export interface PreMarket extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PreMarketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DISCOUNT_FEE_ROLE(overrides?: CallOverrides): Promise<[string]>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    cancelOffer(
      offerId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    cancelOffers(
      offerIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    cancelToken(
      tokenId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    config(overrides?: CallOverrides): Promise<[ConfigStructOutput]>;

    createToken(
      tokenId: BytesLike,
      settleDuration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    fillOffer(
      offerId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    fillOfferETH(
      offerId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    forceCancelOrder(
      orderId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    forceCancelOrders(
      orderIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    frizeToken(
      tokenId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isAcceptedToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isBuyOffer(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isLocked(tokenId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    isSellOffer(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastOfferId(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastOrderId(overrides?: CallOverrides): Promise<[BigNumber]>;

    newOffer(
      offerType: BigNumberish,
      tokenId: BytesLike,
      amount: BigNumberish,
      value: BigNumberish,
      exToken: string,
      fullMatch: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    newOfferETH(
      offerType: BigNumberish,
      tokenId: BytesLike,
      amount: BigNumberish,
      value: BigNumberish,
      fullMatch: boolean,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    offerAmount(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    offerAmountAvailable(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    offerExToken(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    offerStatus(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    offerValue(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    offers(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[OfferStructOutput]>;

    orderStatus(
      orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    orders(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[OrderStructOutput]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setAcceptedTokens(
      tokenAddresses: string[],
      isAccepted: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setLockToken(
      tokenId: BytesLike,
      setLock: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    settle2Steps(
      orderId: BigNumberish,
      hash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    settle2StepsBatch(
      orderIds: BigNumberish[],
      hashes: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    settleCancelled(
      orderId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    settleCancelledWithDiscount(
      orderId: BigNumberish,
      discount: SettleDiscountStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    settleCancelleds(
      orderIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    settleFilled(
      orderId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    settleFilledWithDiscount(
      orderId: BigNumberish,
      discount: SettleDiscountStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    settleFilleds(
      orderIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tokenForceCancelSettlePhase(
      tokenId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    tokenToSettlePhase(
      tokenId: BytesLike,
      tokenAddress: string,
      settleRate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    tokenToggleActivation(
      tokenId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    tokens(
      tokenId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[TokenStructOutput]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateConfig(
      feeWallet_: string,
      feeSettle_: BigNumberish,
      feeRefund_: BigNumberish,
      pledgeRate_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateSettleDuration(
      tokenId: BytesLike,
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawLiquidETH(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawLiquidToken(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawStuckToken(
      _token: string,
      _to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  DISCOUNT_FEE_ROLE(overrides?: CallOverrides): Promise<string>;

  OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

  cancelOffer(
    offerId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  cancelOffers(
    offerIds: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  cancelToken(
    tokenId: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  config(overrides?: CallOverrides): Promise<ConfigStructOutput>;

  createToken(
    tokenId: BytesLike,
    settleDuration: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  fillOffer(
    offerId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  fillOfferETH(
    offerId: BigNumberish,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  forceCancelOrder(
    orderId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  forceCancelOrders(
    orderIds: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  frizeToken(
    tokenId: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isAcceptedToken(token: string, overrides?: CallOverrides): Promise<boolean>;

  isBuyOffer(
    offerId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isLocked(tokenId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  isSellOffer(
    offerId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastOfferId(overrides?: CallOverrides): Promise<BigNumber>;

  lastOrderId(overrides?: CallOverrides): Promise<BigNumber>;

  newOffer(
    offerType: BigNumberish,
    tokenId: BytesLike,
    amount: BigNumberish,
    value: BigNumberish,
    exToken: string,
    fullMatch: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  newOfferETH(
    offerType: BigNumberish,
    tokenId: BytesLike,
    amount: BigNumberish,
    value: BigNumberish,
    fullMatch: boolean,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  offerAmount(
    offerId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  offerAmountAvailable(
    offerId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  offerExToken(
    offerId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  offerStatus(
    offerId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  offerValue(
    offerId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  offers(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<OfferStructOutput>;

  orderStatus(
    orderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  orders(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<OrderStructOutput>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    callerConfirmation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setAcceptedTokens(
    tokenAddresses: string[],
    isAccepted: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setLockToken(
    tokenId: BytesLike,
    setLock: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  settle2Steps(
    orderId: BigNumberish,
    hash: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  settle2StepsBatch(
    orderIds: BigNumberish[],
    hashes: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  settleCancelled(
    orderId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  settleCancelledWithDiscount(
    orderId: BigNumberish,
    discount: SettleDiscountStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  settleCancelleds(
    orderIds: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  settleFilled(
    orderId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  settleFilledWithDiscount(
    orderId: BigNumberish,
    discount: SettleDiscountStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  settleFilleds(
    orderIds: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokenForceCancelSettlePhase(
    tokenId: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  tokenToSettlePhase(
    tokenId: BytesLike,
    tokenAddress: string,
    settleRate: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  tokenToggleActivation(
    tokenId: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  tokens(
    tokenId: BytesLike,
    overrides?: CallOverrides
  ): Promise<TokenStructOutput>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateConfig(
    feeWallet_: string,
    feeSettle_: BigNumberish,
    feeRefund_: BigNumberish,
    pledgeRate_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateSettleDuration(
    tokenId: BytesLike,
    newValue: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawLiquidETH(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawLiquidToken(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawStuckToken(
    _token: string,
    _to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    DISCOUNT_FEE_ROLE(overrides?: CallOverrides): Promise<string>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    cancelOffer(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelOffers(
      offerIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    cancelToken(tokenId: BytesLike, overrides?: CallOverrides): Promise<void>;

    config(overrides?: CallOverrides): Promise<ConfigStructOutput>;

    createToken(
      tokenId: BytesLike,
      settleDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fillOffer(
      offerId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fillOfferETH(
      offerId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    forceCancelOrder(
      orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    forceCancelOrders(
      orderIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    frizeToken(tokenId: BytesLike, overrides?: CallOverrides): Promise<void>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(overrides?: CallOverrides): Promise<void>;

    isAcceptedToken(token: string, overrides?: CallOverrides): Promise<boolean>;

    isBuyOffer(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isLocked(tokenId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    isSellOffer(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastOfferId(overrides?: CallOverrides): Promise<BigNumber>;

    lastOrderId(overrides?: CallOverrides): Promise<BigNumber>;

    newOffer(
      offerType: BigNumberish,
      tokenId: BytesLike,
      amount: BigNumberish,
      value: BigNumberish,
      exToken: string,
      fullMatch: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    newOfferETH(
      offerType: BigNumberish,
      tokenId: BytesLike,
      amount: BigNumberish,
      value: BigNumberish,
      fullMatch: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    offerAmount(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offerAmountAvailable(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offerExToken(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    offerStatus(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offerValue(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offers(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<OfferStructOutput>;

    orderStatus(
      orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orders(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<OrderStructOutput>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAcceptedTokens(
      tokenAddresses: string[],
      isAccepted: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setLockToken(
      tokenId: BytesLike,
      setLock: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    settle2Steps(
      orderId: BigNumberish,
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    settle2StepsBatch(
      orderIds: BigNumberish[],
      hashes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    settleCancelled(
      orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    settleCancelledWithDiscount(
      orderId: BigNumberish,
      discount: SettleDiscountStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    settleCancelleds(
      orderIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    settleFilled(
      orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    settleFilledWithDiscount(
      orderId: BigNumberish,
      discount: SettleDiscountStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    settleFilleds(
      orderIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokenForceCancelSettlePhase(
      tokenId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenToSettlePhase(
      tokenId: BytesLike,
      tokenAddress: string,
      settleRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenToggleActivation(
      tokenId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    tokens(
      tokenId: BytesLike,
      overrides?: CallOverrides
    ): Promise<TokenStructOutput>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateConfig(
      feeWallet_: string,
      feeSettle_: BigNumberish,
      feeRefund_: BigNumberish,
      pledgeRate_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSettleDuration(
      tokenId: BytesLike,
      newValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawLiquidETH(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawLiquidToken(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawStuckToken(
      _token: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CancelOffer(uint256,uint256,uint256,address)"(
      offerId?: null,
      refundValue?: null,
      refundFee?: null,
      doer?: null
    ): CancelOfferEventFilter;
    CancelOffer(
      offerId?: null,
      refundValue?: null,
      refundFee?: null,
      doer?: null
    ): CancelOfferEventFilter;

    "CancelOrder(uint256,address)"(
      orderId?: null,
      doer?: null
    ): CancelOrderEventFilter;
    CancelOrder(orderId?: null, doer?: null): CancelOrderEventFilter;

    "CloseOffer(uint256,uint256)"(
      offerId?: null,
      refundAmount?: null
    ): CloseOfferEventFilter;
    CloseOffer(offerId?: null, refundAmount?: null): CloseOfferEventFilter;

    "Initialized(uint64)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "NewOffer(uint256,uint8,bytes32,address,uint256,uint256,uint256,bool,address)"(
      id?: null,
      offerType?: null,
      tokenId?: null,
      exToken?: null,
      amount?: null,
      value?: null,
      collateral?: null,
      fullMatch?: null,
      doer?: null
    ): NewOfferEventFilter;
    NewOffer(
      id?: null,
      offerType?: null,
      tokenId?: null,
      exToken?: null,
      amount?: null,
      value?: null,
      collateral?: null,
      fullMatch?: null,
      doer?: null
    ): NewOfferEventFilter;

    "NewOrder(uint256,uint256,uint256,address,address)"(
      id?: null,
      offerId?: null,
      amount?: null,
      seller?: null,
      buyer?: null
    ): NewOrderEventFilter;
    NewOrder(
      id?: null,
      offerId?: null,
      amount?: null,
      seller?: null,
      buyer?: null
    ): NewOrderEventFilter;

    "NewToken(bytes32,uint256)"(
      tokenId?: null,
      settleDuration?: null
    ): NewTokenEventFilter;
    NewToken(tokenId?: null, settleDuration?: null): NewTokenEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "Settle2Steps(uint256,bytes32,address)"(
      orderId?: null,
      hash?: null,
      doer?: null
    ): Settle2StepsEventFilter;
    Settle2Steps(
      orderId?: null,
      hash?: null,
      doer?: null
    ): Settle2StepsEventFilter;

    "SettleCancelled(uint256,uint256,uint256,address)"(
      orderId?: null,
      value?: null,
      fee?: null,
      doer?: null
    ): SettleCancelledEventFilter;
    SettleCancelled(
      orderId?: null,
      value?: null,
      fee?: null,
      doer?: null
    ): SettleCancelledEventFilter;

    "SettleFilled(uint256,uint256,uint256,address)"(
      orderId?: null,
      value?: null,
      fee?: null,
      doer?: null
    ): SettleFilledEventFilter;
    SettleFilled(
      orderId?: null,
      value?: null,
      fee?: null,
      doer?: null
    ): SettleFilledEventFilter;

    "TokenCancelled(bytes32)"(tokenId?: null): TokenCancelledEventFilter;
    TokenCancelled(tokenId?: null): TokenCancelledEventFilter;

    "TokenForceCancelSettlePhase(bytes32)"(
      tokenId?: null
    ): TokenForceCancelSettlePhaseEventFilter;
    TokenForceCancelSettlePhase(
      tokenId?: null
    ): TokenForceCancelSettlePhaseEventFilter;

    "TokenFrized(bytes32,uint8)"(
      tokenId?: null,
      status?: null
    ): TokenFrizedEventFilter;
    TokenFrized(tokenId?: null, status?: null): TokenFrizedEventFilter;

    "TokenLockChanged(bytes32,uint8)"(
      tokenId?: null,
      status?: null
    ): TokenLockChangedEventFilter;
    TokenLockChanged(
      tokenId?: null,
      status?: null
    ): TokenLockChangedEventFilter;

    "TokenToSettlePhase(bytes32,address,uint256,uint256)"(
      tokenId?: null,
      token?: null,
      settleRate?: null,
      settleTime?: null
    ): TokenToSettlePhaseEventFilter;
    TokenToSettlePhase(
      tokenId?: null,
      token?: null,
      settleRate?: null,
      settleTime?: null
    ): TokenToSettlePhaseEventFilter;

    "UpdateAcceptedTokens(address[],bool)"(
      tokens?: null,
      isAccepted?: null
    ): UpdateAcceptedTokensEventFilter;
    UpdateAcceptedTokens(
      tokens?: null,
      isAccepted?: null
    ): UpdateAcceptedTokensEventFilter;

    "UpdateConfig(address,uint256,uint256,uint256,address,uint256,uint256,uint256)"(
      oldFeeWallet?: null,
      oldFeeSettle?: null,
      oldFeeRefund?: null,
      oldPledgeRate?: null,
      newFeeWallet?: null,
      newFeeSettle?: null,
      newFeeRefund?: null,
      newPledgeRate?: null
    ): UpdateConfigEventFilter;
    UpdateConfig(
      oldFeeWallet?: null,
      oldFeeSettle?: null,
      oldFeeRefund?: null,
      oldPledgeRate?: null,
      newFeeWallet?: null,
      newFeeSettle?: null,
      newFeeRefund?: null,
      newPledgeRate?: null
    ): UpdateConfigEventFilter;

    "UpdateTokenSettleDuration(bytes32,uint48,uint48)"(
      tokenId?: null,
      oldValue?: null,
      newValue?: null
    ): UpdateTokenSettleDurationEventFilter;
    UpdateTokenSettleDuration(
      tokenId?: null,
      oldValue?: null,
      newValue?: null
    ): UpdateTokenSettleDurationEventFilter;

    "UpdateTokenStatus(bytes32,uint8,uint8)"(
      tokenId?: null,
      oldValue?: null,
      newValue?: null
    ): UpdateTokenStatusEventFilter;
    UpdateTokenStatus(
      tokenId?: null,
      oldValue?: null,
      newValue?: null
    ): UpdateTokenStatusEventFilter;
  };

  estimateGas: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DISCOUNT_FEE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    cancelOffer(
      offerId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    cancelOffers(
      offerIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    cancelToken(
      tokenId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    config(overrides?: CallOverrides): Promise<BigNumber>;

    createToken(
      tokenId: BytesLike,
      settleDuration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    fillOffer(
      offerId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    fillOfferETH(
      offerId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    forceCancelOrder(
      orderId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    forceCancelOrders(
      orderIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    frizeToken(
      tokenId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    isAcceptedToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isBuyOffer(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLocked(tokenId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    isSellOffer(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastOfferId(overrides?: CallOverrides): Promise<BigNumber>;

    lastOrderId(overrides?: CallOverrides): Promise<BigNumber>;

    newOffer(
      offerType: BigNumberish,
      tokenId: BytesLike,
      amount: BigNumberish,
      value: BigNumberish,
      exToken: string,
      fullMatch: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    newOfferETH(
      offerType: BigNumberish,
      tokenId: BytesLike,
      amount: BigNumberish,
      value: BigNumberish,
      fullMatch: boolean,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    offerAmount(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offerAmountAvailable(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offerExToken(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offerStatus(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offerValue(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offers(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    orderStatus(
      orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orders(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setAcceptedTokens(
      tokenAddresses: string[],
      isAccepted: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setLockToken(
      tokenId: BytesLike,
      setLock: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    settle2Steps(
      orderId: BigNumberish,
      hash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    settle2StepsBatch(
      orderIds: BigNumberish[],
      hashes: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    settleCancelled(
      orderId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    settleCancelledWithDiscount(
      orderId: BigNumberish,
      discount: SettleDiscountStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    settleCancelleds(
      orderIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    settleFilled(
      orderId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    settleFilledWithDiscount(
      orderId: BigNumberish,
      discount: SettleDiscountStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    settleFilleds(
      orderIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenForceCancelSettlePhase(
      tokenId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    tokenToSettlePhase(
      tokenId: BytesLike,
      tokenAddress: string,
      settleRate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    tokenToggleActivation(
      tokenId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    tokens(tokenId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateConfig(
      feeWallet_: string,
      feeSettle_: BigNumberish,
      feeRefund_: BigNumberish,
      pledgeRate_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateSettleDuration(
      tokenId: BytesLike,
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawLiquidETH(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawLiquidToken(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawStuckToken(
      _token: string,
      _to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DISCOUNT_FEE_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelOffer(
      offerId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    cancelOffers(
      offerIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    cancelToken(
      tokenId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    config(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createToken(
      tokenId: BytesLike,
      settleDuration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    fillOffer(
      offerId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    fillOfferETH(
      offerId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    forceCancelOrder(
      orderId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    forceCancelOrders(
      orderIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    frizeToken(
      tokenId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isAcceptedToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isBuyOffer(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLocked(
      tokenId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSellOffer(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastOfferId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastOrderId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newOffer(
      offerType: BigNumberish,
      tokenId: BytesLike,
      amount: BigNumberish,
      value: BigNumberish,
      exToken: string,
      fullMatch: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    newOfferETH(
      offerType: BigNumberish,
      tokenId: BytesLike,
      amount: BigNumberish,
      value: BigNumberish,
      fullMatch: boolean,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    offerAmount(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offerAmountAvailable(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offerExToken(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offerStatus(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offerValue(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offers(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orderStatus(
      orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orders(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setAcceptedTokens(
      tokenAddresses: string[],
      isAccepted: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setLockToken(
      tokenId: BytesLike,
      setLock: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    settle2Steps(
      orderId: BigNumberish,
      hash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    settle2StepsBatch(
      orderIds: BigNumberish[],
      hashes: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    settleCancelled(
      orderId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    settleCancelledWithDiscount(
      orderId: BigNumberish,
      discount: SettleDiscountStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    settleCancelleds(
      orderIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    settleFilled(
      orderId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    settleFilledWithDiscount(
      orderId: BigNumberish,
      discount: SettleDiscountStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    settleFilleds(
      orderIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenForceCancelSettlePhase(
      tokenId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    tokenToSettlePhase(
      tokenId: BytesLike,
      tokenAddress: string,
      settleRate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    tokenToggleActivation(
      tokenId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    tokens(
      tokenId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateConfig(
      feeWallet_: string,
      feeSettle_: BigNumberish,
      feeRefund_: BigNumberish,
      pledgeRate_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateSettleDuration(
      tokenId: BytesLike,
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawLiquidETH(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawLiquidToken(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawStuckToken(
      _token: string,
      _to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
